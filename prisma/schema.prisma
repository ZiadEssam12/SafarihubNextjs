// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Tour {
  id               Int                 @id @default(autoincrement())
  slug             String              @unique
  reviews_number   Int                 @default(0)
  adult_price      Float
  child_price      Float
  infant_price     Float               @default(0)
  pricing_groups   PricingGroup[]
  enabled          Boolean             @default(true)
  gallery          String[]
  duration_in_days Int
  offer            Float               @default(0)
  offer_end_date   DateTime?
  start_from       Float
  rate             Float               @default(0)
  overview_text    String
  title            String
  highlights       String[]
  excluded         String[]
  included         String[]
  duration         String
  categories       TourToCategory[]
  destinations     TourToDestination[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  favorite         Favorite[]
}

model PricingGroup {
  id          Int   @id @default(autoincrement())
  from        Int
  to          Int
  price       Float
  child_price Float
  tour        Tour  @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId      Int
}

model Category {
  id        Int              @id @default(autoincrement())
  title     String           @unique
  slug      String           @unique
  tours     TourToCategory[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Destination {
  id        Int                 @id @default(autoincrement())
  title     String              @unique
  slug      String              @unique
  tours     TourToDestination[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model TourToCategory {
  tour       Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@id([tourId, categoryId])
}

model TourToDestination {
  tour          Tour        @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId        Int
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int

  @@id([tourId, destinationId])
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String              @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resetToken    PasswordResetToken?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorite  Favorite[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  DONE
}

model ContactUs {
  id          Int           @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  status      ContactStatus @default(PENDING)
  message     String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String
  tourId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tourId])
  @@index([userId])
}